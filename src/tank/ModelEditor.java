/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tank;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.awt.Toolkit;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import tank.engine.Tools;
import tank.map.MapEditor;

/**
 *
 * @author Krcma
 */
public class ModelEditor extends javax.swing.JFrame {
    
    private BufferedImage img;
    
    private Polygon model;
    
    private final Thread thread;

    /**
     * Creates new form ModelEditor
     */
    public ModelEditor() {
        initComponents();
        Dimension size = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation((size.width - this.getWidth()) / 2, (size.height - this.getHeight()) / 2);
        this.canvas1.setBackground(Color.black);
        this.thread = new Thread(new Runnable() {
            @Override
            public void run() {
                while (true) {
                    BufferStrategy buffer = canvas1.getBufferStrategy();
                    Graphics2D g = (Graphics2D) buffer.getDrawGraphics();
                    g.clearRect(0, 0, canvas1.getWidth(), canvas1.getHeight());
                    //img
                    g.drawImage(img, 0, 0, canvas1);
                    //model
                    if (model != null) {
                        if (model.npoints > 2) {
                            g.setColor(Color.red);
                            g.drawPolygon(model);
                        }
                    }
                    buffer.show();
                    try {
                        Thread.sleep(20);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(ModelEditor.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        canvas1 = new java.awt.Canvas();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Model Editor");

        canvas1.setMinimumSize(new java.awt.Dimension(383, 0));
        canvas1.setPreferredSize(new java.awt.Dimension(383, 383));
        canvas1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                canvas1MousePressed(evt);
            }
        });

        jButton1.setText("Load Image");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(canvas1, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(canvas1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                BufferedImage i = ImageIO.read(fileChooser.getSelectedFile());
                this.img = Tools.resizeImage(
                        i,
                        400,
                        (int) (400f * ((float) i.getHeight() / (float) i.getWidth()))
                );
                this.canvas1.setSize(this.img.getWidth(), this.img.getHeight());
                this.model = null;
            } catch (FileNotFoundException ex) {
                Logger.getLogger(MapEditor.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(MapEditor.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(ModelEditor.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void canvas1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvas1MousePressed
        if (this.model == null) {
            this.model = new Polygon(new int[0], new int[0], 0);
        }
        int[] xp = new int[this.model.npoints + 1];
        int[] yp = new int[this.model.npoints + 1];
        if (this.model.xpoints != null) {
            System.arraycopy(this.model.xpoints, 0, xp, 0, this.model.xpoints.length);
        }
        if (this.model.ypoints != null) {
            System.arraycopy(this.model.ypoints, 0, yp, 0, this.model.ypoints.length);
        }
        xp[this.model.npoints] = evt.getX();
        yp[this.model.npoints] = evt.getY();
        this.model.xpoints = xp;
        this.model.ypoints = yp;
        this.model.npoints++;
        //write to output
        String xs = "xp = new int[]{";
        String ys = "yp = new int[]{";
        for (int i = 0; i < this.model.npoints; i++) {
            float v = (float) this.model.xpoints[i] / (float) this.img.getWidth();
            xs += "(int)("+String.format("%.2f", v).replace(',', '.') + "*this.img.getWidth())" + (i + 1 == this.model.npoints ? "" : ",");
            v = (float) this.model.ypoints[i] / (float) this.img.getHeight();
            ys += "(int)("+String.format("%.2f", v).replace(',', '.') + "*this.img.getHeight())" + (i + 1 == this.model.npoints ? "" : ",");
        }
        this.jTextArea1.setText(xs + "};\n" + ys + "};\nn = " + this.model.npoints+";");
    }//GEN-LAST:event_canvas1MousePressed
    
    public void run() {
        //set Wimdows design
        try {
            UIManager.setLookAndFeel(
                    UIManager.getInstalledLookAndFeels()[3].getClassName());
            SwingUtilities.updateComponentTreeUI(this);
        } catch (ClassNotFoundException | IllegalAccessException | InstantiationException | UnsupportedLookAndFeelException e) {
        }
        this.setVisible(true);
        this.canvas1.createBufferStrategy(3);
        this.thread.start();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Canvas canvas1;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
